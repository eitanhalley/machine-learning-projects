#has pool = 1
DataSetPool1_Lux<-subset(DataTable,DataTable$hasPool==1 & DataTable$category == "Luxury")
DataSetPool1_Bas<-subset(DataTable,DataTable$hasPool==1 & DataTable$category == "Basic")
precentPool1_Lux<-count(DataSetPool1_Lux)/count(DataTable)
precentPool1_Bas<-count(DataSetPool1_Bas)/count(DataTable)
#P(Luxury|hasPool = 1)
p_Lux_con_HasPool <-precentPool1_Lux/precentPool0
#P(Basic|hasPool = 1)
p_Bas_con_HasPool <-precentPool1_Bas/precentPool0
#city part range 1->5
DataSetPartRange1_5<-subset(DataTable,DataTable$cityPartRange>=1 & DataTable$cityPartRange<=5)
precentPartRange1_5<-count(DataSetPartRange1_5)/count(DataTable)
#city part range 1->5 and Luxury
DataSetPartRange1_5_Lux<-subset(DataTable,DataTable$cityPartRange>=1 & DataTable$cityPartRange<=5 & DataTable$category == "Luxury")
precentPartRange1_5_Lux<-count(DataSetPartRange1_5_Lux)/count(DataTable)
#P(Luxury|1 <= CityRange <= 5 )
p_Lux_con_Range1_5 <- precentPartRange1_5_Lux/precentPartRange1_5
#city part range 6->10
DataSetPartRange6_10<-subset(DataTable,DataTable$cityPartRange>5 & DataTable$cityPartRange<=10)
precentPartRange6_10<-count(DataSetPartRange6_10)/count(DataTable)
#city part range 6->10 and Luxury
DataSetPartRange6_10_Lux<-subset(DataTable,DataTable$cityPartRange>5 & DataTable$cityPartRange<=10 & DataTable$category == "Luxury")
precentPartRange6_10_Lux<-count(DataSetPartRange6_10_Lux)/count(DataTable)
#P(Luxury|6 <= CityRange <= 10 )
p_Lux_con_Range6_10 <- precentPartRange6_10_Lux/precentPartRange6_10
#---------------------reset clean data for logistic regression -----------------
clean_DataTable1 <- clean_DataTable
clean_DataTable1$Unnamed..0 <- NULL
clean_DataTable1 <- subset(clean_DataTable,attic < squareMeters)
clean_DataTable1 <- subset(clean_DataTable1,basement < squareMeters)
clean_DataTable1 <- subset(clean_DataTable1,garage < squareMeters)
str(clean_DataTable1)#check perimeters tip
#-------------------Logistic Regression-----------------
library(tidyverse)
#------intstall
#install.packages("purrr")
library(caret)
theme_set(theme_bw())
# Fit the model
model <- glm(as.numeric(clean_DataTable1$category) ~., data = clean_DataTable1, family = binomial)
summary(model)
#check fit model
Fit_model <- glm(as.numeric(clean_DataTable1$category) ~hasYard + hasPool + made + isNewBuilt, data = clean_DataTable1, family = binomial)
summary(Fit_model)
#check fit model + hasGuestRoom + floor + cityCode
Fit_model_1 <- glm(as.numeric(clean_DataTable1$category) ~hasYard + hasPool + made + isNewBuilt + hasGuestRoom + floors + cityCode, data = clean_DataTable1, family = binomial)
summary(Fit_model_1)
# discretization of hasGuestRoom to binary
clean_DataTable1$hasGuestRoom<-factor(ifelse(clean_DataTable1$hasGuestRoom > 0,1,0))
#check fit model + hasGuestRoom + floor + cityCode
Fit_model_2 <- glm(as.numeric(clean_DataTable1$category) ~hasYard + hasPool + made + isNewBuilt + hasGuestRoom  + cityCode, data = clean_DataTable1, family = binomial)
summary(Fit_model_2)
#discretization cityCode to 5 catgorys
for(X in 1:nrow(clean_DataTable1)){
if(clean_DataTable1$cityCode[X]>=0 & clean_DataTable1$cityCode[X]<=20000) {
clean_DataTable1$cityCode[X]<-1
} else if(clean_DataTable1$cityCode[X]>20000 & clean_DataTable1$cityCode[X]<=40000) {
clean_DataTable1$cityCode[X]<-2
} else if(clean_DataTable1$cityCode[X]>40000 & clean_DataTable1$cityCode[X]<=60000) {
clean_DataTable1$cityCode[X]<-3
} else if(clean_DataTable1$cityCode[X]>60000 & clean_DataTable1$cityCode[X]<=80000) {
clean_DataTable1$cityCode[X]<-4
} else if(clean_DataTable1$cityCode[X]>80000 & clean_DataTable1$cityCode[X]<=100000) {
clean_DataTable1$cityCode[X]<-5
}
}
#check fit model + hasGuestRoom + cityCode ## after discretization
Fit_model_2 <- glm(as.numeric(clean_DataTable1$category) ~hasYard + hasPool + made + isNewBuilt + hasGuestRoom  + cityCode , data = clean_DataTable1, family = binomial)
summary(Fit_model_2)
#build final dataSet
final_dataTable <- clean_DataTable
# discretization of hasGuestRoom to binary
final_dataTable$hasGuestRoom<-factor(ifelse(final_dataTable$hasGuestRoom > 0,1,0))
#discretization cityCode to 5 catgorys
for(X in 1:nrow(final_dataTable)){
if(final_dataTable$cityCode[X]>=0 & final_dataTable$cityCode[X]<=20000) {
final_dataTable$cityCode[X]<-1
} else if(final_dataTable$cityCode[X]>20000 & final_dataTable$cityCode[X]<=40000) {
final_dataTable$cityCode[X]<-2
} else if(final_dataTable$cityCode[X]>40000 & final_dataTable$cityCode[X]<=60000) {
final_dataTable$cityCode[X]<-3
} else if(final_dataTable$cityCode[X]>60000 & final_dataTable$cityCode[X]<=80000) {
final_dataTable$cityCode[X]<-4
} else if(final_dataTable$cityCode[X]>80000 & final_dataTable$cityCode[X]<=100000) {
final_dataTable$cityCode[X]<-5
}
}
#make new col for final_dataTable
Error_size_measure <- 0
#add knew variable to clean dataframe error mesure
final_dataTable$Error_size_measure <- Error_size_measure
#enter wanted values into Error_size_measure to 4 catgorys
for(i in 1:nrow(final_dataTable)){
if((final_dataTable$squareMeters[i] < final_dataTable$basement[i]) & (final_dataTable$squareMeters[i] < final_dataTable$attic[i]) & (final_dataTable$squareMeters[i] < final_dataTable$garage[i]) ){
final_dataTable$Error_size_measure[i]<-3
} else if((final_dataTable$squareMeters[i] < final_dataTable$basement[i] & final_dataTable$squareMeters[i] < final_dataTable$attic[i])
|(final_dataTable$squareMeters[i] < final_dataTable$basement[i] & final_dataTable$squareMeters[i] < final_dataTable$garage[i])
|(final_dataTable$squareMeters[i] < final_dataTable$attic[i] & final_dataTable$squareMeters[i] < final_dataTable$garage[i])){
final_dataTable$Error_size_measure[i]<-2
} else if((final_dataTable$squareMeters[i] < final_dataTable$basement[i])
|(final_dataTable$squareMeters[i] < final_dataTable$attic[i])
|(final_dataTable$squareMeters[i] < final_dataTable$garage[i])){
final_dataTable$Error_size_measure[i]<-1
}
}
#remove unwanted column
final_dataTable$squareMeters <- NULL
final_dataTable$numberOfRooms <- NULL
final_dataTable$floors <- NULL
final_dataTable$cityPartRange <- NULL
final_dataTable$numPrevOwners <- NULL
final_dataTable$hasStormProtector <- NULL
final_dataTable$basement <- NULL
final_dataTable$attic <- NULL
final_dataTable$garage <- NULL
final_dataTable$hasStorageRoom <- NULL
final_dataTable$price <- NULL
# Fit the model
model <- glm(as.numeric(final_dataTable$category) ~., data = final_dataTable, family = binomial)
summary(model)
#check fit model
Fit_model <- glm(as.numeric(final_dataTable$category) ~hasYard + hasPool + made + isNewBuilt, data = final_dataTable, family = binomial)
summary(Fit_model)
#check fit model + hasGuestRoom + floor + cityCode
Fit_model_2 <- glm(as.numeric(final_dataTable$category) ~hasYard + hasPool + made + isNewBuilt + hasGuestRoom  + cityCode , data = final_dataTable, family = binomial)
summary(Fit_model_2)
#check fit model + hasGuestRoom + floor + cityCode + Error_size_measure
Fit_model_3 <- glm(as.numeric(final_dataTable$category) ~hasYard + hasPool + made + isNewBuilt + hasGuestRoom + cityCode + Error_size_measure   , data = final_dataTable, family = binomial)
summary(Fit_model_3)
#change catgory from binary back to Luxury=1 and Basic=0
final_dataTable$category<-factor(ifelse(final_dataTable$category > 0,"Luxury","Basic"))
#remove Error_size_measure
final_dataTable$Error_size_measure<-NULL
View(final_dataTable)
library(openxlsx)
write.xlsx(final_dataTable,'Documents/new_file.xlsx',colNames = TRUE)
write.xlsx(final_dataTable,'Documents/Xy_train_new.xlsx',colNames = TRUE)
write.xlsx(final_dataTable,'Documents\new/Xy_train_new.xlsx',colNames = TRUE)
write.xlsx(final_dataTable,'Documents/new/Xy_train_new.xlsx',colNames = TRUE)
write.xlsx(final_dataTable,'Xy_train_new.xlsx',colNames = TRUE)
library(rlang)
library(MASS)
library(fitdistrplus)
library(magrittr)
library(dplyr)
library(lazyeval)
library(parallel)
library(e1071)
library(plotly)
library(ggplot2)
library(triangle)
library(sqldf)
#library(readxl)
# library(knitr)
# library(rmarkdown)
library(simmer)
library(simmer.plot)
library(epiDisplay)
### you must install every package under this
library(mice)
library(ggmice)
library(tidyverse)
library(Ecdat)
library(stringr)
library(readr)
library(dplyr)
library(stringer)
filePath=choose.files()
DataTable<-read.csv(filePath,header=TRUE)
clean_DataTable <- DataTable
clean_DataTable$X <- NULL# replica of Unnamed..0
clean_DataTable[clean_DataTable == "yes"] <- as.numeric(1)
clean_DataTable[clean_DataTable == "no"] <- as.numeric(0)
clean_DataTable[clean_DataTable == -3] <- NA
clean_DataTable[clean_DataTable == -2256352.0] <- NA
clean_DataTable[clean_DataTable == ""] <- NA
clean_DataTable[clean_DataTable == 2122] <- NA
clean_DataTable[clean_DataTable == "Luxury"] <-as.numeric(1)
clean_DataTable[clean_DataTable == "Basic"] <- as.numeric(0)
clean_DataTable$isNewBuilt <-  as.numeric(as.character(clean_DataTable$isNewBuilt))
clean_DataTable$hasStormProtector <-  as.numeric(as.character(clean_DataTable$hasStormProtector))
clean_DataTable$hasGuestRoom <-  as.numeric(as.character(clean_DataTable$hasGuestRoom))
clean_DataTable$category <-  as.numeric(as.character(clean_DataTable$category))
str(clean_DataTable)#check perimeters tip
#---------------------switch null values, part of the values need to be full numbers -----------------
clean_DataTable$numberOfRooms[is.na(clean_DataTable$numberOfRooms)]<-as.integer(mean(clean_DataTable$numberOfRooms,na.rm = TRUE))
clean_DataTable$hasYard[is.na(clean_DataTable$hasYard)]<-
if(mean(clean_DataTable$hasYard,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasYard,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasYard,na.rm = TRUE))
}
clean_DataTable$hasPool[is.na(clean_DataTable$hasPool)]<-
if(mean(clean_DataTable$hasPool,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasPool,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasPool,na.rm = TRUE))}
clean_DataTable$floors[is.na(clean_DataTable$floors)]<-as.integer(mean(clean_DataTable$floors,na.rm = TRUE))
clean_DataTable$cityCode[is.na(clean_DataTable$cityCode)]<-as.integer(mean(clean_DataTable$cityCode,na.rm = TRUE))
clean_DataTable$cityPartRange[is.na(clean_DataTable$cityPartRange)]<-as.integer(mean(clean_DataTable$cityPartRange,na.rm = TRUE))
clean_DataTable$numPrevOwners[is.na(clean_DataTable$numPrevOwners)]<-as.integer(mean(clean_DataTable$numPrevOwners,na.rm = TRUE))
clean_DataTable$made[is.na(clean_DataTable$made)]<-as.integer(mean(clean_DataTable$made,na.rm = TRUE))
clean_DataTable$isNewBuilt[is.na(clean_DataTable$isNewBuilt)]<-
if(mean(clean_DataTable$isNewBuilt,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$isNewBuilt,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$isNewBuilt,na.rm = TRUE))}
clean_DataTable$hasStormProtector[is.na(clean_DataTable$hasStormProtector)]<-
if(mean(clean_DataTable$hasStormProtector,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasStormProtector,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasStormProtector,na.rm = TRUE))}
clean_DataTable$basement[is.na(clean_DataTable$basement)]<-mean(clean_DataTable$basement,na.rm = TRUE)
clean_DataTable$attic[is.na(clean_DataTable$attic)]<-mean(clean_DataTable$attic,na.rm = TRUE)
clean_DataTable$garage[is.na(clean_DataTable$garage)]<-mean(clean_DataTable$garage,na.rm = TRUE)
clean_DataTable$hasStorageRoom[is.na(clean_DataTable$hasStorageRoom)]<-
if(mean(clean_DataTable$hasStorageRoom,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasStorageRoom,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasStorageRoom,na.rm = TRUE))}
clean_DataTable$price[is.na(clean_DataTable$price)]<-mean(clean_DataTable$price,na.rm = TRUE)
clean_DataTable$squareMeters[is.na(clean_DataTable$squareMeters)]<-mean(clean_DataTable$squareMeters,na.rm = TRUE)
View(clean_DataTable)
#---------------------reset clean data for logistic regression -----------------
clean_DataTable1 <- clean_DataTable
#build final dataSet
final_dataTable <- clean_DataTable
# discretization of hasGuestRoom to binary
final_dataTable$hasGuestRoom<-factor(ifelse(final_dataTable$hasGuestRoom > 0,1,0))
#discretization cityCode to 5 catgorys
for(X in 1:nrow(final_dataTable)){
if(final_dataTable$cityCode[X]>=0 & final_dataTable$cityCode[X]<=20000) {
final_dataTable$cityCode[X]<-1
} else if(final_dataTable$cityCode[X]>20000 & final_dataTable$cityCode[X]<=40000) {
final_dataTable$cityCode[X]<-2
} else if(final_dataTable$cityCode[X]>40000 & final_dataTable$cityCode[X]<=60000) {
final_dataTable$cityCode[X]<-3
} else if(final_dataTable$cityCode[X]>60000 & final_dataTable$cityCode[X]<=80000) {
final_dataTable$cityCode[X]<-4
} else if(final_dataTable$cityCode[X]>80000 & final_dataTable$cityCode[X]<=100000) {
final_dataTable$cityCode[X]<-5
}
}
#change catgory from binary back to Luxury=1 and Basic=0
final_dataTable$category<-factor(ifelse(final_dataTable$category > 0,"Luxury","Basic"))
#get new model in excel
#install.packages("openxlsx")
library(openxlsx)
write.xlsx(final_dataTable,'Xy_train_new1.xlsx',colNames = TRUE)
library(rlang)
library(MASS)
library(fitdistrplus)
library(magrittr)
library(dplyr)
library(lazyeval)
library(parallel)
library(e1071)
library(plotly)
library(ggplot2)
library(triangle)
library(sqldf)
#library(readxl)
# library(knitr)
# library(rmarkdown)
library(simmer)
library(simmer.plot)
library(epiDisplay)
### you must install every package under this
library(mice)
library(ggmice)
library(tidyverse)
library(Ecdat)
library(stringr)
library(readr)
library(dplyr)
library(stringer)
filePath=choose.files()
DataTable<-read.csv(filePath,header=TRUE)
#------------------------------make fineal dataSet for project part B-----------------------------------------------------------------
#build final dataSet
final_dataTable <- DataTable
View(DataTable)
View(DataTable)
View(final_dataTable)
library(rlang)
library(MASS)
library(fitdistrplus)
library(magrittr)
library(dplyr)
library(lazyeval)
library(parallel)
library(e1071)
library(plotly)
library(ggplot2)
library(triangle)
library(sqldf)
#library(readxl)
# library(knitr)
# library(rmarkdown)
library(simmer)
library(simmer.plot)
library(epiDisplay)
### you must install every package under this
library(mice)
library(ggmice)
library(tidyverse)
library(Ecdat)
library(stringr)
library(readr)
library(dplyr)
library(stringer)
filePath=choose.files()
DataTable<-read.csv(filePath,header=TRUE)
filePath=choose.files()
DataTable<-read.csv(filePath,header=TRUE)
View(DataTable)
filePath=choose.files()
DataTable<-read.csv(filePath,header=TRUE)
clean_DataTable <- DataTable
clean_DataTable$X <- NULL# replica of Unnamed..0
clean_DataTable[clean_DataTable == "yes"] <- as.numeric(1)
clean_DataTable[clean_DataTable == "no"] <- as.numeric(0)
clean_DataTable[clean_DataTable == -3] <- NA
clean_DataTable[clean_DataTable == -2256352.0] <- NA
clean_DataTable[clean_DataTable == ""] <- NA
clean_DataTable[clean_DataTable == 2122] <- NA
clean_DataTable[clean_DataTable == "Luxury"] <-as.numeric(1)
clean_DataTable[clean_DataTable == "Basic"] <- as.numeric(0)
clean_DataTable$isNewBuilt <-  as.numeric(as.character(clean_DataTable$isNewBuilt))
clean_DataTable$hasStormProtector <-  as.numeric(as.character(clean_DataTable$hasStormProtector))
clean_DataTable$hasGuestRoom <-  as.numeric(as.character(clean_DataTable$hasGuestRoom))
clean_DataTable$category <-  as.numeric(as.character(clean_DataTable$category))
str(clean_DataTable)#check perimeters tip
clean_DataTable$numberOfRooms[is.na(clean_DataTable$numberOfRooms)]<-as.integer(mean(clean_DataTable$numberOfRooms,na.rm = TRUE))
clean_DataTable$hasYard[is.na(clean_DataTable$hasYard)]<-
if(mean(clean_DataTable$hasYard,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasYard,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasYard,na.rm = TRUE))
}
clean_DataTable$hasPool[is.na(clean_DataTable$hasPool)]<-
if(mean(clean_DataTable$hasPool,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasPool,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasPool,na.rm = TRUE))}
clean_DataTable$floors[is.na(clean_DataTable$floors)]<-as.integer(mean(clean_DataTable$floors,na.rm = TRUE))
clean_DataTable$cityCode[is.na(clean_DataTable$cityCode)]<-as.integer(mean(clean_DataTable$cityCode,na.rm = TRUE))
clean_DataTable$cityPartRange[is.na(clean_DataTable$cityPartRange)]<-as.integer(mean(clean_DataTable$cityPartRange,na.rm = TRUE))
clean_DataTable$numPrevOwners[is.na(clean_DataTable$numPrevOwners)]<-as.integer(mean(clean_DataTable$numPrevOwners,na.rm = TRUE))
clean_DataTable$made[is.na(clean_DataTable$made)]<-as.integer(mean(clean_DataTable$made,na.rm = TRUE))
clean_DataTable$isNewBuilt[is.na(clean_DataTable$isNewBuilt)]<-
if(mean(clean_DataTable$isNewBuilt,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$isNewBuilt,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$isNewBuilt,na.rm = TRUE))}
clean_DataTable$hasStormProtector[is.na(clean_DataTable$hasStormProtector)]<-
if(mean(clean_DataTable$hasStormProtector,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasStormProtector,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasStormProtector,na.rm = TRUE))}
clean_DataTable$basement[is.na(clean_DataTable$basement)]<-mean(clean_DataTable$basement,na.rm = TRUE)
clean_DataTable$attic[is.na(clean_DataTable$attic)]<-mean(clean_DataTable$attic,na.rm = TRUE)
clean_DataTable$garage[is.na(clean_DataTable$garage)]<-mean(clean_DataTable$garage,na.rm = TRUE)
clean_DataTable$hasStorageRoom[is.na(clean_DataTable$hasStorageRoom)]<-
if(mean(clean_DataTable$hasStorageRoom,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasStorageRoom,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasStorageRoom,na.rm = TRUE))}
clean_DataTable$price[is.na(clean_DataTable$price)]<-mean(clean_DataTable$price,na.rm = TRUE)
clean_DataTable$squareMeters[is.na(clean_DataTable$squareMeters)]<-mean(clean_DataTable$squareMeters,na.rm = TRUE)
#------------------------------make fineal dataSet for project part B-----------------------------------------------------------------
#build final dataSet
final_dataTable <- clean_DataTable
# discretization of hasGuestRoom to binary
final_dataTable$hasGuestRoom<-factor(ifelse(final_dataTable$hasGuestRoom > 0,1,0))
#discretization cityCode to 5 catgorys
for(X in 1:nrow(final_dataTable)){
if(final_dataTable$cityCode[X]>=0 & final_dataTable$cityCode[X]<=20000) {
final_dataTable$cityCode[X]<-1
} else if(final_dataTable$cityCode[X]>20000 & final_dataTable$cityCode[X]<=40000) {
final_dataTable$cityCode[X]<-2
} else if(final_dataTable$cityCode[X]>40000 & final_dataTable$cityCode[X]<=60000) {
final_dataTable$cityCode[X]<-3
} else if(final_dataTable$cityCode[X]>60000 & final_dataTable$cityCode[X]<=80000) {
final_dataTable$cityCode[X]<-4
} else if(final_dataTable$cityCode[X]>80000 & final_dataTable$cityCode[X]<=100000) {
final_dataTable$cityCode[X]<-5
}
}
library(openxlsx)
write.xlsx(final_dataTable,'Xy_train_new.xlsx',colNames = TRUE)
library(rlang)
library(MASS)
library(fitdistrplus)
library(magrittr)
library(dplyr)
library(lazyeval)
library(parallel)
library(e1071)
library(plotly)
library(ggplot2)
library(triangle)
library(sqldf)
#library(readxl)
# library(knitr)
# library(rmarkdown)
library(simmer)
library(simmer.plot)
library(epiDisplay)
### you must install every package under this
library(mice)
library(ggmice)
library(tidyverse)
library(Ecdat)
library(stringr)
library(readr)
library(dplyr)
library(stringer)
filePath=choose.files()
DataTable<-read.csv(filePath,header=TRUE)
clean_DataTable <- DataTable
clean_DataTable$X <- NULL# replica of Unnamed..0
clean_DataTable[clean_DataTable == "yes"] <- as.numeric(1)
clean_DataTable[clean_DataTable == "no"] <- as.numeric(0)
clean_DataTable[clean_DataTable == -3] <- NA
clean_DataTable[clean_DataTable == -2256352.0] <- NA
clean_DataTable[clean_DataTable == ""] <- NA
clean_DataTable[clean_DataTable == 2122] <- NA
clean_DataTable[clean_DataTable == "Luxury"] <-as.numeric(1)
clean_DataTable[clean_DataTable == "Basic"] <- as.numeric(0)
clean_DataTable$isNewBuilt <-  as.numeric(as.character(clean_DataTable$isNewBuilt))
clean_DataTable$hasStormProtector <-  as.numeric(as.character(clean_DataTable$hasStormProtector))
clean_DataTable$hasGuestRoom <-  as.numeric(as.character(clean_DataTable$hasGuestRoom))
clean_DataTable$category <-  as.numeric(as.character(clean_DataTable$category))
str(clean_DataTable)#check perimeters tip
clean_DataTable$numberOfRooms[is.na(clean_DataTable$numberOfRooms)]<-as.integer(mean(clean_DataTable$numberOfRooms,na.rm = TRUE))
clean_DataTable$hasYard[is.na(clean_DataTable$hasYard)]<-
if(mean(clean_DataTable$hasYard,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasYard,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasYard,na.rm = TRUE))
}
clean_DataTable$hasPool[is.na(clean_DataTable$hasPool)]<-
if(mean(clean_DataTable$hasPool,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasPool,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasPool,na.rm = TRUE))}
clean_DataTable$floors[is.na(clean_DataTable$floors)]<-as.integer(mean(clean_DataTable$floors,na.rm = TRUE))
clean_DataTable$cityCode[is.na(clean_DataTable$cityCode)]<-as.integer(mean(clean_DataTable$cityCode,na.rm = TRUE))
clean_DataTable$cityPartRange[is.na(clean_DataTable$cityPartRange)]<-as.integer(mean(clean_DataTable$cityPartRange,na.rm = TRUE))
clean_DataTable$numPrevOwners[is.na(clean_DataTable$numPrevOwners)]<-as.integer(mean(clean_DataTable$numPrevOwners,na.rm = TRUE))
clean_DataTable$made[is.na(clean_DataTable$made)]<-as.integer(mean(clean_DataTable$made,na.rm = TRUE))
clean_DataTable$isNewBuilt[is.na(clean_DataTable$isNewBuilt)]<-
if(mean(clean_DataTable$isNewBuilt,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$isNewBuilt,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$isNewBuilt,na.rm = TRUE))}
clean_DataTable$hasStormProtector[is.na(clean_DataTable$hasStormProtector)]<-
if(mean(clean_DataTable$hasStormProtector,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasStormProtector,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasStormProtector,na.rm = TRUE))}
clean_DataTable$basement[is.na(clean_DataTable$basement)]<-mean(clean_DataTable$basement,na.rm = TRUE)
clean_DataTable$attic[is.na(clean_DataTable$attic)]<-mean(clean_DataTable$attic,na.rm = TRUE)
clean_DataTable$garage[is.na(clean_DataTable$garage)]<-mean(clean_DataTable$garage,na.rm = TRUE)
clean_DataTable$hasStorageRoom[is.na(clean_DataTable$hasStorageRoom)]<-
if(mean(clean_DataTable$hasStorageRoom,na.rm = TRUE) > 0.5){
ceiling(mean(clean_DataTable$hasStorageRoom,na.rm = TRUE))
}else{
floor(mean(clean_DataTable$hasStorageRoom,na.rm = TRUE))}
clean_DataTable$price[is.na(clean_DataTable$price)]<-mean(clean_DataTable$price,na.rm = TRUE)
clean_DataTable$squareMeters[is.na(clean_DataTable$squareMeters)]<-mean(clean_DataTable$squareMeters,na.rm = TRUE)
#------------------------------make fineal dataSet for project part B-----------------------------------------------------------------
#build final dataSet
final_dataTable <- clean_DataTable
# discretization of hasGuestRoom to binary
final_dataTable$hasGuestRoom<-factor(ifelse(final_dataTable$hasGuestRoom > 0,1,0))
#discretization cityCode to 5 catgorys
for(X in 1:nrow(final_dataTable)){
if(final_dataTable$cityCode[X]>=0 & final_dataTable$cityCode[X]<=20000) {
final_dataTable$cityCode[X]<-1
} else if(final_dataTable$cityCode[X]>20000 & final_dataTable$cityCode[X]<=40000) {
final_dataTable$cityCode[X]<-2
} else if(final_dataTable$cityCode[X]>40000 & final_dataTable$cityCode[X]<=60000) {
final_dataTable$cityCode[X]<-3
} else if(final_dataTable$cityCode[X]>60000 & final_dataTable$cityCode[X]<=80000) {
final_dataTable$cityCode[X]<-4
} else if(final_dataTable$cityCode[X]>80000 & final_dataTable$cityCode[X]<=100000) {
final_dataTable$cityCode[X]<-5
}
}
#remove unwanted column
final_dataTable$squareMeters <- NULL
final_dataTable$numberOfRooms <- NULL
final_dataTable$floors <- NULL
final_dataTable$cityPartRange <- NULL
final_dataTable$numPrevOwners <- NULL
final_dataTable$hasStormProtector <- NULL
final_dataTable$basement <- NULL
final_dataTable$attic <- NULL
final_dataTable$garage <- NULL
final_dataTable$hasStorageRoom <- NULL
final_dataTable$price <- NULL
#install.packages("openxlsx")
library(openxlsx)
write.xlsx(final_dataTable,'Xy_train_new.xlsx',colNames = TRUE)
View(final_dataTable)
final_dataTable$Unnamed..0 <- NULL
library(openxlsx)
write.xlsx(final_dataTable,'Xy_train_new.xlsx',colNames = TRUE)
View(final_dataTable)
View(final_dataTable)
